
/*Contructor for single linked list*/
/*Initialize head to null*/
function LinkedList(){
  this.head=null
}

/*push method for linked list*/
/*Append new element to the back of the linked list*/
LinkedList.prototype.push = function(val){
  var node = {
    val:val,
    next: null
  }
  if(!this.head){
    this.head = node;
  }else{
    var currentNode = this.head;
    while(currentNode.next){
      currentNode = currentNode.next;
    }
    currentNode.next = node;
  }
}

/*get node by index number*/
LinkedList.prototype.getNodeByIndex = function(index){
  var returnNode = this.head;
  for (i = 0; i < index; i++){
    returnNode = returnNode.next;
  }
  return returnNode;
}

/*Get length*/
LinkedList.prototype.length = function(){
  var tmpNode = this.head;
  if(!tmpNode){
    return 0;
  }else{
    var l = 1;
    while(tmpNode.next){
      l++;
      tmpNode = tmpNode.next;
    }
    return l;
  }
}

/*Pop method*/
/*Remove the last element*/
LinkedList.prototype.pop = function(){
  let l = this.length();
  if(l === 1){
    this.val = null;
    this.next = null;
  }else{
    var tmpNode = this.head;
    for(i = 0; i < l; i++){
      if(i === (l-2)){
        tmpNode.next = undefined;
        return;
      }
      tmpNode = tmpNode.next;
    }
  }
}

/*Print everything in the linked list*/
LinkedList.prototype.print = function(){
  let l = this.length();
  for(i = 0; i < l; i++){
    console.log("The "+i+"th element is "+this.getNodeByIndex(i).val+"!");
  }
}

var a = new LinkedList()
a.push(1);
a.push(2);
a.push(3);
a.push(4);
a.push(5);
a.push(6);
a.push(7);
a.push(8);
console.log("The node at 0 is: "+a.getNodeByIndex(0).val);
console.log("The node at 1 is: "+a.getNodeByIndex(1).val);
console.log("The node at 2 is: "+a.getNodeByIndex(2).val);
a.pop();
a.pop();
console.log("The length of a is: "+a.length());
a.print();
